{
  "description": "SecurityGroup is an Entra Security Group.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "description": {
          "description": "Description: The description of the group.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName: The display name of the group.",
          "type": "string"
        },
        "isAssignableToRole": {
          "description": "IsAssignableToRole: Indicates whether the group can be assigned to a role.",
          "type": "boolean"
        },
        "mailNickname": {
          "description": "MailNickname: The email address of the group, specified either as a mail nickname (`mygroup`)\nor as a full email address (`mygroup@mydomain.com`).",
          "type": "string"
        },
        "membershipType": {
          "description": "MembershipType: The membership type of the group.",
          "enum": [
            "assigned",
            "enabled",
            "assignedm365",
            "enabledm365"
          ],
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The operator specific configuration for the resource.",
          "properties": {
            "configmaps": {
              "description": "ConfigMaps specifies any config maps that should be created by the operator.",
              "properties": {
                "entraID": {
                  "description": "EntraID: The Entra ID of the group.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "creationMode": {
              "description": "CreationMode: Specifies how ASO will try to create the resource.\nSpecify \"AlwaysCreate\" to always create a new security group when first reconciled.\nOr specify \"AdoptOrCreate\" to first try to adopt an existing security group with the same display name.\nIf multiple security groups with the same display name are found, the resource condition will show an error.\nIf not specified, defaults to \"AdoptOrCreate\".",
              "enum": [
                "AdoptOrCreate",
                "AlwaysCreate"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "displayName",
        "mailNickname"
      ],
      "type": "object"
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "description": {
          "description": "Description: The description of the group.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName: The display name of the group.",
          "type": "string"
        },
        "entraID": {
          "description": "EntraID: The GUID identifing the resource in Entra",
          "type": "string"
        },
        "groupEmailAddress": {
          "description": "MailNickname: The email address of the group.",
          "type": "string"
        }
      },
      "required": [
        "groupEmailAddress"
      ],
      "type": "object"
    }
  },
  "type": "object"
}
