{
  "description": "Cluster is the Schema for the Clusters API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "ClusterSpec defines the desired state of Cluster.\n\nA regional grouping of one or more container instances where you can run\ntask requests. Each account receives a default cluster the first time you\nuse the Amazon ECS service, but you may also create other clusters. Clusters\nmay contain more than one instance type simultaneously.",
      "properties": {
        "capacityProviders": {
          "description": "The short name of one or more capacity providers to associate with the cluster.\nA capacity provider must be associated with a cluster before it can be included\nas part of the default capacity provider strategy of the cluster or used\nin a capacity provider strategy when calling the CreateService (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)\nor RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)\nactions.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity\nprovider must be created but not associated with another cluster. New Auto\nScaling group capacity providers can be created with the CreateCapacityProvider\n(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCapacityProvider.html)\nAPI operation.\n\nTo use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT\ncapacity providers. The Fargate capacity providers are available to all accounts\nand only need to be associated with a cluster to be used.\n\nThe PutCapacityProvider (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutCapacityProvider.html)\nAPI operation is used to update the list of available capacity providers\nfor a cluster after the cluster is created.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "configuration": {
          "description": "The execute command configuration for the cluster.",
          "properties": {
            "executeCommandConfiguration": {
              "description": "The details of the execute command configuration.",
              "properties": {
                "kmsKeyID": {
                  "type": "string"
                },
                "logConfiguration": {
                  "description": "The log configuration for the results of the execute command actions. The\nlogs can be sent to CloudWatch Logs or an Amazon S3 bucket.",
                  "properties": {
                    "cloudWatchEncryptionEnabled": {
                      "type": "boolean"
                    },
                    "cloudWatchLogGroupName": {
                      "type": "string"
                    },
                    "s3BucketName": {
                      "type": "string"
                    },
                    "s3EncryptionEnabled": {
                      "type": "boolean"
                    },
                    "s3KeyPrefix": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "logging": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "defaultCapacityProviderStrategy": {
          "description": "The capacity provider strategy to set as the default for the cluster. After\na default capacity provider strategy is set for a cluster, when you call\nthe CreateService (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html)\nor RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)\nAPIs with no capacity provider strategy or launch type specified, the default\ncapacity provider strategy for the cluster is used.\n\nIf a default capacity provider strategy isn't defined for a cluster when\nit was created, it can be defined later with the PutClusterCapacityProviders\n(https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)\nAPI operation.",
          "items": {
            "description": "The details of a capacity provider strategy. A capacity provider strategy\ncan be set when using the RunTask (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html)or\nCreateCluster (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateCluster.html)\nAPIs or as the default capacity provider strategy for a cluster with the\nCreateCluster API.\n\nOnly capacity providers that are already associated with a cluster and have\nan ACTIVE or UPDATING status can be used in a capacity provider strategy.\nThe PutClusterCapacityProviders (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutClusterCapacityProviders.html)\nAPI is used to associate a capacity provider with a cluster.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity\nprovider must already be created. New Auto Scaling group capacity providers\ncan be created with the CreateClusterCapacityProvider (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateClusterCapacityProvider.html)\nAPI operation.\n\nTo use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT\ncapacity providers. The Fargate capacity providers are available to all accounts\nand only need to be associated with a cluster to be used in a capacity provider\nstrategy.\n\nWith FARGATE_SPOT, you can run interruption tolerant tasks at a rate that's\ndiscounted compared to the FARGATE price. FARGATE_SPOT runs tasks on spare\ncompute capacity. When Amazon Web Services needs the capacity back, your\ntasks are interrupted with a two-minute warning. FARGATE_SPOT supports Linux\ntasks with the X86_64 architecture on platform version 1.3.0 or later. FARGATE_SPOT\nsupports Linux tasks with the ARM64 architecture on platform version 1.4.0\nor later.\n\nA capacity provider strategy may contain a maximum of 6 capacity providers.",
            "properties": {
              "base": {
                "format": "int64",
                "type": "integer"
              },
              "capacityProvider": {
                "type": "string"
              },
              "weight": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of your cluster. If you don't specify a name for your cluster, you\ncreate a cluster that's named default. Up to 255 letters (uppercase and lowercase),\nnumbers, underscores, and hyphens are allowed.",
          "type": "string"
        },
        "serviceConnectDefaults": {
          "description": "Use this parameter to set a default Service Connect namespace. After you\nset a default Service Connect namespace, any new services with Service Connect\nturned on that are created in the cluster are added as client services in\nthe namespace. This setting only applies to new services that set the enabled\nparameter to true in the ServiceConnectConfiguration. You can set the namespace\nof each service individually in the ServiceConnectConfiguration to override\nthis default parameter.\n\nTasks that run in a namespace can use short names to connect to services\nin the namespace. Tasks can connect to services across all of the clusters\nin the namespace. Tasks connect through a managed proxy container that collects\nlogs and metrics for increased visibility. Only the tasks that Amazon ECS\nservices create are supported with Service Connect. For more information,\nsee Service Connect (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html)\nin the Amazon Elastic Container Service Developer Guide.",
          "properties": {
            "namespace": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "settings": {
          "description": "The setting to use when creating a cluster. This parameter is used to turn\non CloudWatch Container Insights for a cluster. If this value is specified,\nit overrides the containerInsights value set with PutAccountSetting (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html)\nor PutAccountSettingDefault (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).",
          "items": {
            "description": "The settings to use when creating a cluster. This parameter is used to turn\non CloudWatch Container Insights with enhanced observability or CloudWatch\nContainer Insights for a cluster.\n\nContainer Insights with enhanced observability provides all the Container\nInsights metrics, plus additional task and container metrics. This version\nsupports enhanced observability for Amazon ECS clusters using the Amazon\nEC2 and Fargate launch types. After you configure Container Insights with\nenhanced observability on Amazon ECS, Container Insights auto-collects detailed\ninfrastructure telemetry from the cluster level down to the container level\nin your environment and displays these critical performance data in curated\ndashboards removing the heavy lifting in observability set-up.\n\nFor more information, see Monitor Amazon ECS containers using Container Insights\nwith enhanced observability (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "tags": {
          "description": "The metadata that you apply to the cluster to help you categorize and organize\nthem. Each tag consists of a key and an optional value. You define both.\n\nThe following basic restrictions apply to tags:\n\n  - Maximum number of tags per resource - 50\n\n  - For each resource, each tag key must be unique, and each tag key can\n    have only one value.\n\n  - Maximum key length - 128 Unicode characters in UTF-8\n\n  - Maximum value length - 256 Unicode characters in UTF-8\n\n  - If your tagging schema is used across multiple services and resources,\n    remember that other services may have restrictions on allowed characters.\n    Generally allowed characters are: letters, numbers, and spaces representable\n    in UTF-8, and the following characters: + - = . _ : / @.\n\n  - Tag keys and values are case-sensitive.\n\n  - Do not use aws:, AWS:, or any upper or lowercase combination of such\n    as a prefix for either keys or values as it is reserved for Amazon Web\n    Services use. You cannot edit or delete tag keys or values with this prefix.\n    Tags with this prefix do not count against your tags per resource limit.",
          "items": {
            "description": "The metadata that you apply to a resource to help you categorize and organize\nthem. Each tag consists of a key and an optional value. You define them.\n\nThe following basic restrictions apply to tags:\n\n  - Maximum number of tags per resource - 50\n\n  - For each resource, each tag key must be unique, and each tag key can\n    have only one value.\n\n  - Maximum key length - 128 Unicode characters in UTF-8\n\n  - Maximum value length - 256 Unicode characters in UTF-8\n\n  - If your tagging schema is used across multiple services and resources,\n    remember that other services may have restrictions on allowed characters.\n    Generally allowed characters are: letters, numbers, and spaces representable\n    in UTF-8, and the following characters: + - = . _ : / @.\n\n  - Tag keys and values are case-sensitive.\n\n  - Do not use aws:, AWS:, or any upper or lowercase combination of such\n    as a prefix for either keys or values as it is reserved for Amazon Web\n    Services use. You cannot edit or delete tag keys or values with this prefix.\n    Tags with this prefix do not count against your tags per resource limit.",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "status": {
      "description": "ClusterStatus defines the observed state of Cluster",
      "properties": {
        "ackResourceMetadata": {
          "description": "All CRs managed by ACK have a common `Status.ACKResourceMetadata` member\nthat is used to contain resource sync state, account ownership,\nconstructed ARN for the resource",
          "properties": {
            "arn": {
              "description": "ARN is the Amazon Resource Name for the resource. This is a\nglobally-unique identifier and is set only by the ACK service controller\nonce the controller has orchestrated the creation of the resource OR\nwhen it has verified that an \"adopted\" resource (a resource where the\nARN annotation was set by the Kubernetes user on the CR) exists and\nmatches the supplied CR's Spec field values.\nhttps://github.com/aws/aws-controllers-k8s/issues/270",
              "type": "string"
            },
            "ownerAccountID": {
              "description": "OwnerAccountID is the AWS Account ID of the account that owns the\nbackend AWS service API resource.",
              "type": "string"
            },
            "region": {
              "description": "Region is the AWS region in which the resource exists or will exist.",
              "type": "string"
            }
          },
          "required": [
            "ownerAccountID",
            "region"
          ],
          "type": "object"
        },
        "activeServicesCount": {
          "description": "The number of services that are running on the cluster in an ACTIVE state.\nYou can view these services with PListServices (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServices.html).",
          "format": "int64",
          "type": "integer"
        },
        "attachments": {
          "description": "The resources attached to a cluster. When using a capacity provider with\na cluster, the capacity provider and associated resources are returned as\ncluster attachments.",
          "items": {
            "description": "An object representing a container instance or task attachment.",
            "properties": {
              "details": {
                "items": {
                  "description": "A key-value pair object.",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "id": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "attachmentsStatus": {
          "description": "The status of the capacity providers associated with the cluster. The following\nare the states that are returned.\n\nUPDATE_IN_PROGRESS\n\nThe available capacity providers for the cluster are updating.\n\nUPDATE_COMPLETE\n\nThe capacity providers have successfully updated.\n\nUPDATE_FAILED\n\nThe capacity provider updates failed.",
          "type": "string"
        },
        "conditions": {
          "description": "All CRs managed by ACK have a common `Status.Conditions` member that\ncontains a collection of `ackv1alpha1.Condition` objects that describe\nthe various terminal states of the CR and its backend AWS service API\nresource",
          "items": {
            "description": "Condition is the common struct used by all CRDs managed by ACK service\ncontrollers to indicate terminal states  of the CR and its backend AWS\nservice API resource",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the Condition",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "pendingTasksCount": {
          "description": "The number of tasks in the cluster that are in the PENDING state.",
          "format": "int64",
          "type": "integer"
        },
        "registeredContainerInstancesCount": {
          "description": "The number of container instances registered into the cluster. This includes\ncontainer instances in both ACTIVE and DRAINING status.",
          "format": "int64",
          "type": "integer"
        },
        "runningTasksCount": {
          "description": "The number of tasks in the cluster that are in the RUNNING state.",
          "format": "int64",
          "type": "integer"
        },
        "statistics": {
          "description": "Additional information about your clusters that are separated by launch type.\nThey include the following:\n\n   * runningEC2TasksCount\n\n   * RunningFargateTasksCount\n\n   * pendingEC2TasksCount\n\n   * pendingFargateTasksCount\n\n   * activeEC2ServiceCount\n\n   * activeFargateServiceCount\n\n   * drainingEC2ServiceCount\n\n   * drainingFargateServiceCount",
          "items": {
            "description": "A key-value pair object.",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "status": {
          "description": "The status of the cluster. The following are the possible states that are\nreturned.\n\nACTIVE\n\nThe cluster is ready to accept tasks and if applicable you can register container\ninstances with the cluster.\n\nPROVISIONING\n\nThe cluster has capacity providers that are associated with it and the resources\nneeded for the capacity provider are being created.\n\nDEPROVISIONING\n\nThe cluster has capacity providers that are associated with it and the resources\nneeded for the capacity provider are being deleted.\n\nFAILED\n\nThe cluster has capacity providers that are associated with it and the resources\nneeded for the capacity provider have failed to create.\n\nINACTIVE\n\nThe cluster has been deleted. Clusters with an INACTIVE status may remain\ndiscoverable in your account for a period of time. However, this behavior\nis subject to change in the future. We don't recommend that you rely on INACTIVE\nclusters persisting.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}
